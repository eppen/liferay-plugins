apply from: "${gradle.lfrSdkDir}/versions.gradle"

allprojects {
	apply plugin: "war"

	ant.loadproperties(srcFile: "${gradle.lfrSdkDir}/build.properties")

	File pluginSrcDir = file("${projectDir}/docroot")

	if (!pluginSrcDir.exists()) {
		pluginSrcDir = file("${projectDir}/src")

		if (!pluginSrcDir.exists()) {
			pluginSrcDir = null
		}
	}

	if (pluginSrcDir == null) {
		return
	}

	task initGradle {
		Boolean osgiPlugin

		Closure addExtProperty
		Closure getBuildGradleDependencies
		Closure getBuildGradleDependenciesCompile
		Closure getBuildGradleDependenciesProvidedCompile
		Closure getBuildGradleExt
		Closure getBuildGradleExtPluginFullVersion
		Closure getBuildXmlProperty
		Closure wrapContents
		Closure writeBuildGradleFile
		Closure writeDependencySettingsFile

		File bndPropertiesFile
		File buildXmlFile
		File ivyXmlFile
		File pluginPackagePropertiesFile

		Node buildXmlNode
		Node ivyXmlNode

		Properties bndProperties
		Properties pluginPackageProperties

		getBuildGradleDependencies = {
			List contents = []

			contents.addAll(getBuildGradleDependenciesCompile())
			contents.addAll(getBuildGradleDependenciesProvidedCompile())

			return wrapContents(contents, "", " {", "dependencies", "}")
		}

		getBuildGradleDependenciesCompile = {
			List contents = []

			if (ivyXmlNode) {
				ivyXmlNode.dependencies.dependency.each {
					contents << "\t\t[group: \"${it.@org}\", name:\"${it.@name}\", version: \"${it.@rev}\"],"
				}
			}

			String requiredDeploymentContexts = pluginPackageProperties["required-deployment-contexts"]

			if (requiredDeploymentContexts) {
				String[] requiredDeploymentContextsArray = requiredDeploymentContexts.split(",")

				requiredDeploymentContextsArray.each {
					String serviceJarFileName = "../../" + it.replaceFirst(".+-", "") + "s/${it}/docroot/WEB-INF/lib/${it}-service.jar"

					File serviceJarFile = new File("${projectDir}", serviceJarFileName)

					if (serviceJarFile.exists()) {
						contents << "\t\tfiles(\"${serviceJarFileName}\"),"
					}
				}
			}

			return wrapContents(contents, "\t", "(", "compile", ")")
		}

		getBuildGradleDependenciesProvidedCompile = {
			List contents = []

			String portalDependencyJars = pluginPackageProperties["portal-dependency-jars"]

			portalDependencyJars = portalDependencyJars.replaceAll("\\.jar", "")
			portalDependencyJars = portalDependencyJars.replaceAll("-\\w") {
				it[1].toUpperCase()
			}

			String[] portalDependencyJarsArray = portalDependencyJars.split(",");

			portalDependencyJarsArray.each {
				String portalDependencyJar ->

				Map portalDependencyJarsMap = portalDependencies.get(portalDependencyJar)

				if (portalDependencyJarsMap == null) {
					println("Portal dependency " + portalDependencyJar + " is not defined in versions.gradle")
				}
				else {
					contents << "\t\t[group: \"${portalDependencyJarsMap."group"}\", name: \"${portalDependencyJarsMap."name"}\", version: \"${portalDependencyJarsMap."version"}\"],"
				}
			}

			return wrapContents(contents, "\t", "(", "providedCompile", ")")
		}

		addExtProperty = {
			String name, String value ->

			if (value) {
				return "\t${name} = \"${value}\""
			}
			else {
				return []
			}
		}

		getBuildGradleExt = {
			List contents = []

			String ignoreOsgiPortalClasspath = getBuildXmlProperty("ignore.osgi.portal.classpath", "")
			String osgiIdeDependencies = getBuildXmlProperty("osgi.ide.dependencies", "")
			String osgiRuntimeDependencies = getBuildXmlProperty("osgi.runtime.dependencies", "")
			String pluginPackaging = "war"
			String portalDependencyTlds = pluginPackageProperties["portal-dependency-tlds"]
			String themeParent = getBuildXmlProperty("theme.parent", "")

			if (project.parent.name == "shared" || osgiPlugin == true) {

				pluginPackaging = "jar"
			}

			contents.addAll(addExtProperty("ignoreOsgiPortalClasspath", ignoreOsgiPortalClasspath))
			contents.addAll(addExtProperty("osgiIdeDependencies", osgiIdeDependencies))
			contents.addAll(addExtProperty("osgiRuntimeDependencies", osgiRuntimeDependencies))
			contents.addAll(addExtProperty("pluginPackaging", pluginPackaging))
			contents.addAll(addExtProperty("portalDependencyTlds", portalDependencyTlds))
			contents.addAll(addExtProperty("themeParent", themeParent))

			contents.addAll(getBuildGradleExtPluginFullVersion())

			return wrapContents(contents, "", " {", "ext", "}")
		}

		getBuildGradleExtPluginFullVersion = {
			String pluginFullVersion = null;

			String moduleFullVersion = pluginPackageProperties["module-full-version"]

			if (moduleFullVersion != null) {
				pluginFullVersion = moduleFullVersion
			}
			else {
				String bundleVersion = bndProperties["Bundle-Version"]

				if (bundleVersion != null) {
					pluginFullVersion = bundleVersion
				}
				else {
					String moduleIncrementalVersion = pluginPackageProperties["module-incremental-version"]

					if (moduleIncrementalVersion == null) {
						moduleIncrementalVersion = getBuildXmlProperty("plugin.version", "1")
					}

					pluginFullVersion = getBuildXmlProperty("plugin.full.version", ant.properties["lp.version"] + "." + moduleIncrementalVersion)
				}
			}

			return "\tpluginFullVersion = \"${pluginFullVersion}\""
		}

		getBuildXmlProperty = {
			String key, String defaultValue ->

			String value = defaultValue

			Node buildXmlPropertyNode = buildXmlNode.property.find {
				it.@name == key
			}

			if (buildXmlPropertyNode) {
				value = buildXmlPropertyNode.@value
			}

			return value
		}

		wrapContents = {
			List contents, String indent, String leftClose, String name, String rightClose ->

			if (contents.isEmpty()) {
				return contents;
			}

			contents.add(0, indent + name + leftClose)

			String content = contents.last()

			if (content.endsWith(",")) {
				contents.pop()

				contents << content.substring(0, content.length() - 1)
			}

			contents << indent + rightClose

			return contents
		}

		writeBuildGradleFile = {
			List contents = []

			contents.addAll(getBuildGradleDependencies())
			contents.addAll(getBuildGradleExt())

			File buildGradleFile = new File("${projectDir}/build.gradle")

			contents.each {
				buildGradleFile << it + "\n"
			}
		}

		writeDependencySettingsFile = {
			File dependencySettingsFile = new File("${projectDir}/dependency-settings.gradle")

			String importShared = getBuildXmlProperty("import.shared", "")

			if (importShared) {
				List contents = []

				String[] importSharedArray = importShared.split(",")

				importSharedArray.each {
					contents << "includeTransitive \":shared:${it}\""
				}

				contents.each {
					dependencySettingsFile << it + "\n"
				}
			}
			else {
				dependencySettingsFile.delete()
			}
		}

		// bnd.bnd

		bndProperties = new Properties()

		bndPropertiesFile = new File("${projectDir}/bnd.bnd")

		if (bndPropertiesFile.exists()) {
			bndProperties.load(new FileInputStream(bndPropertiesFile))

			osgiPlugin = true
		}

		// build.xml

		XmlParser xmlParser = new XmlParser()

		xmlParser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)

		buildXmlFile = new File("${projectDir}/build.xml")

		buildXmlNode = xmlParser.parse(buildXmlFile)

		// ivy.xml

		ivyXmlNode = null

		ivyXmlFile = new File("${projectDir}/ivy.xml")

		if (ivyXmlFile.exists()) {
			ivyXmlNode = xmlParser.parse(ivyXmlFile)
		}

		// liferay-plugin-package.properties

		pluginPackageProperties = new Properties()

		pluginPackagePropertiesFile = new File("${projectDir}/docroot/WEB-INF/liferay-plugin-package.properties")

		if (pluginPackagePropertiesFile.exists()) {
			pluginPackageProperties.load(new FileInputStream(pluginPackagePropertiesFile))
		}

		// build.gradle

		writeBuildGradleFile()

		// dependency-settings.gradle

		writeDependencySettingsFile()
	}
}