import org.apache.commons.codec.digest.DigestUtils
import org.apache.tools.ant.filters.ReplaceTokens

apply from: "util.gradle"

buildscript {
	dependencies {
		classpath group: "commons-codec", name: "commons-codec", version: "1.9"
	}

	repositories {
		maven {
			url "http://cdn.repository.liferay.com/nexus/content/groups/public"
		}
	}
}

task compareDists
task createLayouttpl
task createTheme
task createWeb

compareDists << {
	Closure compareDistFileContents
	Closure compareDistFileNames
	Closure compareDists
	Closure getFileChecksums

	List<String> antDistFileNames
	List<String> commonDistFileNames
	List<String> gradleDistFileNames

	compareDistFileContents = {
		for (String fileName : commonDistFileNames) {
			FileTree antZipFileTree = zipTree("dist/${fileName}")

			Map<String, String> antFileChecksums = getFileChecksums(antZipFileTree)

			FileTree gradleZipFileTree = zipTree("dist2/${fileName}")

			Map<String, String> gradleFileChecksums = getFileChecksums(gradleZipFileTree)

			Set<String> antFilePaths = antFileChecksums.keySet()
			Set<String> gradleFilePaths = gradleFileChecksums.keySet()

			Set<String> commonFilePaths = antFilePaths.intersect(gradleFilePaths)

			if ((antFilePaths.size() != commonFilePaths.size()) || (antFilePaths.size() != gradleFilePaths.size())) {
				println "${fileName} does not match."

				Set<String> uniqueFilePaths = antFilePaths - commonFilePaths

				if (uniqueFilePaths) {
					println "Unique files in the Ant distribution: " + uniqueFilePaths.join(", ") + "."
				}

				uniqueFilePaths = gradleFilePaths - commonFilePaths

				if (uniqueFilePaths) {
					println "Unique files in the Gradle distribution: " + uniqueFilePaths.join(", ") + "."
				}

				return false
			}

			List<String> differentChecksumFilePaths = antFileChecksums.findResults {
				filePath, antFileChecksum ->

				String gradleFileChecksum = gradleFileChecksums[filePath]

				if (antFileChecksum != gradleFileChecksum) {
					return filePath
				}

				return null
			}

			if (project.hasProperty("compareDistsExcludeSharedChecksums") && project.compareDistsExcludeSharedChecksums.toBoolean()) {
				differentChecksumFilePaths.removeAll {
					it.endsWith "-shared.jar"
				}
			}

			if (differentChecksumFilePaths) {
				println "${fileName} does not match and has different files: " + differentChecksumFilePaths.join(", ")

				return false
			}
		}

		return true
	}

	compareDistFileNames = {
		if ((antDistFileNames.size() != commonDistFileNames.size()) || (antDistFileNames.size() != gradleDistFileNames.size())) {
			println "Distribution directories contain different files."

			List<String> uniqueDistFileNames = antDistFileNames - commonDistFileNames

			if (uniqueDistFileNames) {
				println "Unique files in the Ant distribution directory: " + uniqueDistFileNames.join(", ") + "."
			}

			uniqueDistFileNames = gradleDistFileNames - commonDistFileNames

			if (uniqueDistFileNames) {
				println "Unique files in the Gradle distribution directory: " + uniqueDistFileNames.join(", ") + "."
			}

			return false
		}

		return true
	}

	compareDists = {
		FileTree antDistFileTree = fileTree(dir: "dist", include: "*.war")

		antDistFileNames = antDistFileTree*.name

		FileTree gradleDistFileTree = fileTree(dir: "dist2", include: "*.war")

		gradleDistFileNames = gradleDistFileTree*.name

		commonDistFileNames = antDistFileNames.intersect(gradleDistFileNames)

		if (!compareDistFileNames()) {
			return
		}

		if (!compareDistFileContents()) {
			return
		}

		println "Distribution directories do match."
	}

	getFileChecksums = {
		FileTree fileTree ->

		Map<String, String> fileChecksums = [:]

		fileTree.visit {
			FileVisitDetails fileVisitDetails ->

			if (fileVisitDetails.directory) {
				return
			}

			InputStream inputStream = fileVisitDetails.open()

			inputStream.withStream {
				String filePath = fileVisitDetails.relativePath
				String fileChecksum = DigestUtils.md5Hex(inputStream)

				fileChecksums[filePath] = fileChecksum
			}
		}

		return fileChecksums
	}

	compareDists()
}

createLayouttpl << {
	String layouttplDisplayName = project.properties["layouttplDisplayName"]
	String layouttplName = project.properties["layouttplName"]

	if (!layouttplDisplayName || !layouttplName) {
		throw new GradleException("This task must be called by the create script.")
	}

	File layouttplDir = file("layouttpl/${layouttplName}-layouttpl")

	if (layouttplDir.exists()) {
		throw new GradleException("${layouttplName}-layouttpl already exists.")
	}

	String layouttplTemplateName = layouttplName.replaceAll("-", "_")

	copy {
		filesNotMatching("**/*.png") {
			filter(
				ReplaceTokens,
				tokens: [
					"layouttpl.display.name": layouttplDisplayName,
					"layouttpl.name": layouttplName,
					"layouttpl.template.name": layouttplTemplateName,
					"plugin.type.dir": ".."
				])
		}

		from "${rootDir}/tools/templates/layouttpl_tmpl"

		into layouttplDir

		rename {
			String fileName ->

			fileName.replace("blank_columns", layouttplTemplateName)
		}
	}
}

createTheme << {
	String themeDisplayName = project.properties["themeDisplayName"]
	String themeName = project.properties["themeName"]

	if (!themeDisplayName || !themeName) {
		throw new GradleException("This task must be called by the create script.")
	}

	File themeDir = file("themes/${themeName}-theme")

	if (themeDir.exists()) {
		throw new GradleException("${themeName}-theme already exists.")
	}

	copy {
		filter(
			ReplaceTokens,
			tokens: [
				"plugin.type.dir": "..",
				"theme.display.name": themeDisplayName,
				"theme.name": themeName
			])

		from "${rootDir}/tools/templates/theme_tmpl"

		into themeDir
	}

	mkdirs("${themeDir}/docroot/_diffs")
	mkdirs("${themeDir}/docroot/WEB-INF/src/resources-importer/document_library/documents")
	mkdirs("${themeDir}/docroot/WEB-INF/src/resources-importer/journal/articles")
	mkdirs("${themeDir}/docroot/WEB-INF/src/resources-importer/journal/structures")
	mkdirs("${themeDir}/docroot/WEB-INF/src/resources-importer/journal/templates")
}

createWeb << {
	String webDisplayName = project.properties["webDisplayName"]
	String webName = project.properties["webName"]

	if (!webDisplayName || !webName) {
		throw new GradleException("This task must be called by the create script.")
	}

	File webDir = file("webs/${webName}-web")

	if (webDir.exists()) {
		throw new GradleException("${webName}-web already exists.")
	}

	copy {
		filter(
			ReplaceTokens,
			tokens: [
				"plugin.type.dir": "..",
				"web.display.name": webDisplayName,
				"web.name": webName
			])

		from "${rootDir}/tools/templates/web_tmpl"

		into webDir
	}
}