apply from: "$gradle.lfrSdkDir/versions.gradle"

allprojects {
	apply plugin: "war"

	ant.loadproperties(srcFile: "$gradle.lfrSdkDir/build.properties")

	File pluginSrcDir = file("$projectDir/docroot")

	if (!pluginSrcDir.exists()) {
		pluginSrcDir = file("$projectDir/src")

		if (!pluginSrcDir.exists()) {
			pluginSrcDir = null
		}
	}

	if (pluginSrcDir == null) {
		return
	}

	task initGradle {
		Closure getBuildGradleDependencies
		Closure getBuildGradleDependenciesCompile
		Closure getBuildGradleDependenciesProvidedCompile
		Closure getBuildGradleExt
		Closure getBuildGradleExtPluginFullVersion
		Closure getBuildGradleImportShared
		Closure getBuildXmlProperty
		Closure writeBuildGradleFile
		Closure writeDependencySettingsFile

		File bndPropertiesFile
		File buildXmlFile
		File ivyXmlFile
		File pluginPackagePropertiesFile

		Node buildXmlNode
		Node ivyXmlNode

		Properties bndProperties
		Properties pluginPackageProperties

		String importShared
		String portalDependencyJars
		String requiredDeploymentContexts

		XmlParser xmlParser

		getBuildGradleDependencies = {
			List contents = []

			contents << "dependencies {"

			contents.addAll(getBuildGradleDependenciesCompile())
			contents.addAll(getBuildGradleDependenciesProvidedCompile())

			contents << "}"

			return contents
		}

		getBuildGradleDependenciesCompile = {
			List contents = []

			contents << "\tcompile("

			if (ivyXmlNode) {
				ivyXmlNode.dependencies.dependency.each {
					contents << "\t\t[group: \"${it.@org}\", name:\"${it.@name}\", version: \"${it.@rev}\"],"
				}
			}

			contents << "\t)"

			return contents
		}

		getBuildGradleDependenciesProvidedCompile = {
			List contents = []

			contents << "\tprovidedCompile("

			if (portalDependencyJars != null) {
				portalDependencyJars = portalDependencyJars.replaceAll("\\.jar", "")
				portalDependencyJars = portalDependencyJars.replaceAll("-\\w") {
					it[1].toUpperCase()
				}

				String[] portalDependencyJarsArray = portalDependencyJars.split(",");

				portalDependencyJarsArray.each {
					portalDependencyJar ->

					Map portalDependencyJarsMap = portalDependencies.get(portalDependencyJar)

					if (portalDependencyJarsMap == null) {
						println("Portal dependency " + portalDependencyJar + " is not defined in versions.gradle")
					}
					else {
						contents << "\t\t[group: \"${portalDependencyJarsMap."group"}\", name: \"${portalDependencyJarsMap."name"}\", version: \"${portalDependencyJarsMap."version"}\"],"
					}
				}
			}

			contents << "\t)"

			return contents
		}

		getBuildGradleExt = {
			List contents = []

			contents << "ext {"
			contents.addAll(getBuildGradleExtPluginFullVersion())
			contents << "}"

			return contents
		}

		getBuildGradleExtPluginFullVersion = {
			String pluginFullVersion = null;

			String moduleFullVersion = pluginPackageProperties["module-full-version"]

			if (moduleFullVersion != null) {
				pluginFullVersion = moduleFullVersion
			}
			else {
				String bundleVersion = bndProperties["Bundle-Version"]

				if (bundleVersion != null) {
					pluginFullVersion = bundleVersion
				}
				else {
					String moduleIncrementalVersion = pluginPackageProperties["module-incremental-version"]

					if (moduleIncrementalVersion == null) {
						moduleIncrementalVersion = getBuildXmlProperty("plugin.version", "1")
					}

					pluginFullVersion = getBuildXmlProperty("plugin.full.version", ant.properties["lp.version"] + "." + moduleIncrementalVersion)
				}
			}

			return "\tpluginFullVersion = \"$pluginFullVersion\""
		}

		getBuildXmlProperty = {
			key, defaultValue ->

			String value = defaultValue

			Node buildXmlPropertyNode = buildXmlNode.property.find {
				it.@name == key
			}

			if (buildXmlPropertyNode) {
				value = buildXmlPropertyNode.@value
			}

			return value
		}

		writeBuildGradleFile = {
			List contents = []

			contents.addAll(getBuildGradleDependencies())
			contents.addAll(getBuildGradleExt())

			File buildGradleFile = new File("$projectDir/build.gradle")

			contents.each {
				buildGradleFile << it + "\n"
			}
		}

		// bnd.bnd

		bndProperties = new Properties()

		bndPropertiesFile = new File("$projectDir/bnd.bnd")

		if (bndPropertiesFile.exists()) {
			bndProperties.load(new FileInputStream(bndPropertiesFile))
		}

		// build.xml

		xmlParser = new XmlParser()

		xmlParser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)

		buildXmlFile = new File("$projectDir/build.xml")

		buildXmlNode = xmlParser.parse(buildXmlFile)

		// ivy.xml

		ivyXmlNode = null

		ivyXmlFile = new File("$projectDir/ivy.xml")

		if (ivyXmlFile.exists()) {
			ivyXmlNode = xmlParser.parse(ivyXmlFile)
		}

		// liferay-plugin-package.properties

		pluginPackageProperties = new Properties()

		pluginPackagePropertiesFile = new File("$projectDir/docroot/WEB-INF/liferay-plugin-package.properties")

		if (pluginPackagePropertiesFile.exists()) {
			pluginPackageProperties.load(new FileInputStream(pluginPackagePropertiesFile))
		}

		// Set properties

		importShared = getBuildXmlProperty("import.shared", "")

		portalDependencyJars = pluginPackageProperties["portal-dependency-jars"]

		requiredDeploymentContexts = pluginPackageProperties["required-deployment-contexts"]

		// build.gradle

		writeBuildGradleFile()
	}
}