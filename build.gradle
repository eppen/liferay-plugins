import org.apache.commons.codec.digest.DigestUtils

apply from: "${gradle.lfrSdkDir}/versions.gradle"

buildscript {
	dependencies {
		classpath group: "commons-codec", name: "commons-codec", version: "1.9"
	}

	repositories {
		maven {
			url "http://cdn.repository.liferay.com/nexus/content/groups/public"
		}
	}
}

Closure commonProjectCondition
Closure commonProjects
Closure configureProjects
Closure pluginProjectCondition
Closure pluginProjects

commonProjectCondition = {
	true
}

commonProjects = {
	apply from: "${gradle.lfrSdkDir}/util.gradle"

	configurations {
		all {
			resolutionStrategy.cacheChangingModulesFor 15, 'minutes'
		}
	}

	repositories {
		maven {
			url "http://cdn.repository.liferay.com/nexus/content/groups/public"
		}
	}
}

configureProjects = {
	Closure projectCondition, Closure projectConfig ->

	gradle.beforeProject {
		if (!projectCondition(it)) {
			return
		}

		configure(it, projectConfig)
	}
}

pluginProjectCondition = {
	it.exists("build.gradle") && it.parent
}

pluginProjects = {
	Closure readConfigurations
	Closure setExtProperties

	readConfigurations = {

		// bnd.bnd

		project.ext.bndProperties = new Properties()

		File bndPropertiesFile = project.file("bnd.bnd")

		if (bndPropertiesFile.exists()) {
			InputStream inputStream = new FileInputStream(bndPropertiesFile)

			inputStream.withStream {
				bndProperties.load(it)
			}
		}

		// liferay-plugin-package.properties

		project.ext.pluginPackageProperties = new Properties()

		File pluginPackagePropertiesFile = project.file("docroot/WEB-INF/liferay-plugin-package.properties")

		if (pluginPackagePropertiesFile.exists()) {
			InputStream inputStream = new FileInputStream(pluginPackagePropertiesFile)

			inputStream.withStream {
				pluginPackageProperties.load(it)
			}
		}
	}

	setExtProperties = {

		// osgiPlugin

		project.ext.osgiPlugin = project.exists("bnd.bnd")

		// pluginSrcDir

		project.ext.pluginSrcDir = project.file("docroot/WEB-INF/src")

		if (!project.pluginSrcDir.exists()) {
			project.pluginSrcDir = project.file("src")
		}
	}

	readConfigurations()

	setExtProperties()

	apply from: "${gradle.lfrSdkDir}/build-plugins.gradle"

	if (name.endsWith("-theme")) {
		apply from: "${gradle.lfrSdkDir}/build-themes.gradle"
	}
}

task compareDists

compareDists << {
	Closure compareDistFileContents
	Closure compareDistFileNames
	Closure compareDists
	Closure getFileChecksums

	List<String> antDistFileNames
	List<String> commonDistFileNames
	List<String> gradleDistFileNames

	compareDistFileContents = {
		for (String fileName : commonDistFileNames) {
			FileTree antZipFileTree = zipTree("dist/${fileName}")

			Map<String, String> antFileChecksums = getFileChecksums(antZipFileTree)

			FileTree gradleZipFileTree = zipTree("dist2/${fileName}")

			Map<String, String> gradleFileChecksums = getFileChecksums(gradleZipFileTree)

			Set<String> antFilePaths = antFileChecksums.keySet()
			Set<String> gradleFilePaths = gradleFileChecksums.keySet()

			Set<String> commonFilePaths = antFilePaths.intersect(gradleFilePaths)

			if ((antFilePaths.size() != commonFilePaths.size()) || (antFilePaths.size() != gradleFilePaths.size())) {
				println "${fileName} does not match."

				Set<String> uniqueFilePaths = antFilePaths - commonFilePaths

				if (uniqueFilePaths) {
					println "Unique files in the Ant distribution: " + uniqueFilePaths.join(", ") + "."
				}

				uniqueFilePaths = gradleFilePaths - commonFilePaths

				if (uniqueFilePaths) {
					println "Unique files in the Gradle distribution: " + uniqueFilePaths.join(", ") + "."
				}

				return false
			}

			List<String> differentChecksumFilePaths = antFileChecksums.findResults {
				filePath, antFileChecksum ->

				String gradleFileChecksum = gradleFileChecksums[filePath]

				if (antFileChecksum != gradleFileChecksum) {
					return filePath
				}

				return null
			}

			if (project.hasProperty("compareDistsExcludeSharedChecksums") && project.compareDistsExcludeSharedChecksums.toBoolean()) {
				differentChecksumFilePaths.removeAll {
					it.endsWith "-shared.jar"
				}
			}

			if (differentChecksumFilePaths) {
				println "${fileName} does not match and has different files: " + differentChecksumFilePaths.join(", ")

				return false
			}
		}

		return true
	}

	compareDistFileNames = {
		if ((antDistFileNames.size() != commonDistFileNames.size()) || (antDistFileNames.size() != gradleDistFileNames.size())) {
			println "Distribution directories contain different files."

			List<String> uniqueDistFileNames = antDistFileNames - commonDistFileNames

			if (uniqueDistFileNames) {
				println "Unique files in the Ant distribution directory: " + uniqueDistFileNames.join(", ") + "."
			}

			uniqueDistFileNames = gradleDistFileNames - commonDistFileNames

			if (uniqueDistFileNames) {
				println "Unique files in the Gradle distribution directory: " + uniqueDistFileNames.join(", ") + "."
			}

			return false
		}

		return true
	}

	compareDists = {
		FileTree antDistFileTree = fileTree(dir: "dist", include: "*.war")

		antDistFileNames = antDistFileTree*.name

		FileTree gradleDistFileTree = fileTree(dir: "dist2", include: "*.war")

		gradleDistFileNames = gradleDistFileTree*.name

		commonDistFileNames = antDistFileNames.intersect(gradleDistFileNames)

		if (!compareDistFileNames()) {
			return
		}

		if (!compareDistFileContents()) {
			return
		}

		println "Distribution directories do match."
	}

	getFileChecksums = {
		FileTree fileTree ->

		Map<String, String> fileChecksums = [:]

		fileTree.visit {
			FileVisitDetails fileVisitDetails ->

			if (fileVisitDetails.directory) {
				return
			}

			InputStream inputStream = fileVisitDetails.open()

			inputStream.withStream {
				String filePath = fileVisitDetails.relativePath
				String fileChecksum = DigestUtils.md5Hex(inputStream)

				fileChecksums[filePath] = fileChecksum
			}
		}

		return fileChecksums
	}

	compareDists()
}

configureProjects(commonProjectCondition, commonProjects)

configureProjects(pluginProjectCondition, pluginProjects)