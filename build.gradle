apply from: "${gradle.lfrSdkDir}/versions.gradle"

allprojects {
	ant.loadproperties(srcFile: "${gradle.lfrSdkDir}/build.properties")

	File pluginSrcDir = file("${projectDir}/docroot")

	if (!pluginSrcDir.exists()) {
		pluginSrcDir = file("${projectDir}/src")

		if (!pluginSrcDir.exists()) {
			pluginSrcDir = null
		}
	}

	if (pluginSrcDir == null) {
		return
	}

	ext.pluginSrcDir = pluginSrcDir

	task initGradle << {
		Boolean osgiPlugin

		Closure getBuildGradleDependencies
		Closure getBuildGradleDependenciesCompile
		Closure getBuildGradleDependenciesProvidedCompile
		Closure getBuildGradleDependenciesTestCompile
		Closure getBuildGradleExt
		Closure getBuildGradleExtPluginFullVersion
		Closure getBuildXmlProperty
		Closure getIndent
		Closure wrapContents
		Closure wrapDependency
		Closure wrapProperty
		Closure wrapServiceJar
		Closure writeBuildGradleFile
		Closure writeDependencySettingsFile

		File bndPropertiesFile
		File buildXmlFile
		File ivyXmlFile
		File pluginPackagePropertiesFile

		Node buildXmlNode
		Node ivyXmlNode

		Properties bndProperties
		Properties pluginPackageProperties

		getBuildGradleDependencies = {
			List contents = []

			contents.addAll(getBuildGradleDependenciesCompile())
			contents.addAll(getBuildGradleDependenciesProvidedCompile())
			contents.addAll(getBuildGradleDependenciesTestCompile())

			return wrapContents(contents, 0, " {", "dependencies", "}")
		}

		getBuildGradleDependenciesCompile = {
			List contents = []

			if (ivyXmlNode) {
				ivyXmlNode.dependencies.dependency.each {
					if ((it.@conf == null) || (it.@conf == "default")) {
						contents.addAll(wrapDependency(2, it.@org, it.@name, it.@rev))
					}
				}
			}

			String requiredDeploymentContexts = pluginPackageProperties["required-deployment-contexts"]

			if (requiredDeploymentContexts) {
				String[] requiredDeploymentContextsArray = requiredDeploymentContexts.split(",")

				requiredDeploymentContextsArray.each {
					String serviceJarFileName = "../../" + it.replaceFirst(".+-", "") + "s/${it}/docroot/WEB-INF/lib/${it}-service.jar"

					File serviceJarFile = new File("${projectDir}", serviceJarFileName)

					if (serviceJarFile.exists()) {
						contents.addAll(wrapServiceJar(2, serviceJarFileName))
					}
				}
			}

			return wrapContents(contents, 1, "(", "compile", ")")
		}

		getBuildGradleDependenciesProvidedCompile = {
			List contents = []

			String portalDependencyJars = pluginPackageProperties["portal-dependency-jars"]

			if (portalDependencyJars) {
				portalDependencyJars = portalDependencyJars.replaceAll("\\.jar", "")
				portalDependencyJars = portalDependencyJars.replaceAll("-\\w") {
					it[1].toUpperCase()
				}

				String[] portalDependencyJarsArray = portalDependencyJars.split(",");

				portalDependencyJarsArray.each {
					String portalDependencyJar ->

					Map portalDependencyJarMap = portalDependencies.get(portalDependencyJar)

					if (portalDependencyJarMap == null) {
						println("Portal dependency " + portalDependencyJar + " is not defined in versions.gradle")
					}
					else {
						contents.addAll(wrapDependency(2, portalDependencyJarMap["group"], portalDependencyJarMap["name"], portalDependencyJarMap["version"]))
					}
				}

			}

			return wrapContents(contents, 1, "(", "providedCompile", ")")
		}

		getBuildGradleDependenciesTestCompile = {
			List contents = []

			if (ivyXmlNode) {
				ivyXmlNode.dependencies.dependency.each {
					if (it.@conf =~ "test") {
						contents.addAll(wrapDependency(2, it.@org, it.@name, it.@rev))
					}
				}
			}

			return wrapContents(contents, 1, "(", "testCompile", ")")
		}

		getBuildGradleExt = {
			List contents = []

			contents.addAll(wrapProperty(1, "osgiIdeDependencies", getBuildXmlProperty("osgi.ide.dependencies")))
			contents.addAll(wrapProperty(1, "osgiRuntimeDependencies", getBuildXmlProperty("osgi.runtime.dependencies")))
			contents.addAll(wrapProperty(1, "pluginFullVersion", getBuildGradleExtPluginFullVersion()))

			String pluginPackaging = "war"

			if ((project.parent.name == "shared") || osgiPlugin) {
				pluginPackaging = "jar"
			}

			contents.addAll(wrapProperty(1, "pluginPackaging", pluginPackaging))

			contents.addAll(wrapProperty(1, "portalDependencyTlds", pluginPackageProperties["portal-dependency-tlds"]))
			contents.addAll(wrapProperty(1, "themeParent", getBuildXmlProperty("theme.parent")))

			return wrapContents(contents, 0, " {", "ext", "}")
		}

		getBuildGradleExtPluginFullVersion = {
			String pluginFullVersion = null;

			String moduleFullVersion = pluginPackageProperties["module-full-version"]

			if (moduleFullVersion != null) {
				pluginFullVersion = moduleFullVersion
			}
			else {
				String bundleVersion = bndProperties["Bundle-Version"]

				if (bundleVersion != null) {
					pluginFullVersion = bundleVersion
				}
				else {
					String moduleIncrementalVersion = pluginPackageProperties["module-incremental-version"]

					if (moduleIncrementalVersion == null) {
						moduleIncrementalVersion = getBuildXmlProperty("plugin.version")
					}

					pluginFullVersion = getBuildXmlProperty("plugin.full.version", ant.properties["lp.version"] + "." + moduleIncrementalVersion)
				}
			}

			return pluginFullVersion
		}

		getBuildXmlProperty = {
			String key, String defaultValue = "" ->

			String value = defaultValue

			Node buildXmlPropertyNode = buildXmlNode.property.find {
				it.@name == key
			}

			if (buildXmlPropertyNode) {
				value = buildXmlPropertyNode.@value
			}

			return value
		}

		getIndent = {
			String indent = ""

			it.times(
			{
				indent = indent + "\t"
			})

			return indent
		}

		wrapContents = {
			List contents, int indentCount, String leftClose, String name, String rightClose ->

			if (contents.isEmpty()) {
				return contents;
			}

			String indent = getIndent(indentCount)

			contents.add(0, indent + name + leftClose)

			String content = contents.last()

			if (content.endsWith(",")) {
				contents.pop()

				contents << content.substring(0, content.length() - 1)
			}

			contents << indent + rightClose

			return contents
		}

		wrapDependency = {
			int indentCount, String group, String name, String version ->

			return "${getIndent(indentCount)}[group: \"${group}\", name: \"${name}\", version: \"${version}\"],"
		}

		wrapProperty = {
			int indentCount, String name, String value = "" ->

			if (value) {
				return "${getIndent(indentCount)}${name} = \"${value}\""
			}

			return []
		}

		wrapServiceJar = {
			int indentCount, String serviceJarFileName ->

			return "${getIndent(indentCount)}files(\"${serviceJarFileName}\"),"
		}

		writeBuildGradleFile = {
			List contents = []

			contents.addAll(getBuildGradleDependencies())
			contents.addAll(getBuildGradleExt())

			File buildGradleFile = new File("${projectDir}/build.gradle")

			contents.each {
				buildGradleFile << it + "\n"
			}
		}

		writeDependencySettingsFile = {
			File dependencySettingsFile = new File("${projectDir}/dependency-settings.gradle")

			String importShared = getBuildXmlProperty("import.shared")

			if (importShared) {
				List contents = []

				String[] importSharedArray = importShared.split(",")

				importSharedArray.each {
					contents << "includeTransitive \":shared:${it}\""
				}

				contents.each {
					dependencySettingsFile << it + "\n"
				}
			}
			else {
				dependencySettingsFile.delete()
			}
		}

		// bnd.bnd

		bndProperties = new Properties()

		bndPropertiesFile = new File("${projectDir}/bnd.bnd")

		if (bndPropertiesFile.exists()) {
			bndProperties.load(new FileInputStream(bndPropertiesFile))

			osgiPlugin = true
		}

		// build.xml

		XmlParser xmlParser = new XmlParser()

		xmlParser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)

		buildXmlFile = new File("${projectDir}/build.xml")

		buildXmlNode = xmlParser.parse(buildXmlFile)

		// ivy.xml

		ivyXmlNode = null

		ivyXmlFile = new File("${projectDir}/ivy.xml")

		if (ivyXmlFile.exists()) {
			ivyXmlNode = xmlParser.parse(ivyXmlFile)
		}

		// liferay-plugin-package.properties

		pluginPackageProperties = new Properties()

		pluginPackagePropertiesFile = new File("${projectDir}/docroot/WEB-INF/liferay-plugin-package.properties")

		if (pluginPackagePropertiesFile.exists()) {
			pluginPackageProperties.load(new FileInputStream(pluginPackagePropertiesFile))
		}

		// build.gradle

		writeBuildGradleFile()

		// dependency-settings.gradle

		writeDependencySettingsFile()
	}
}

configure(
	allprojects.findAll {
		it.hasProperty("pluginSrcDir")
	}) {

	apply plugin: "war"

	Map projectCompileDependencies = gradle.compileDependencies.find {
		project.path == it.projectPath
	}

	clean {
		if (projectCompileDependencies) {
			projectCompileDependencies["compile"].each {
				dependsOn "$it:clean"
			}
		}
	}

	dependencies {
		if (projectCompileDependencies) {
			projectCompileDependencies["compile"].each {
				compile project(it)
			}
		}

		if (!(project.name.equals("portal-compat-shared")) && !(project.name.contains("layouttpl")) && !(project.name.contains("themes"))) {

			compile project(":shared:portal-compat-shared")
		}

		providedCompile(
			[group: 'com.liferay', name: 'aQute.bnd', version: '2.3.0'],
			[group: 'com.liferay.portal', name: 'portal-service', version: '7.0.0-SNAPSHOT'],
			[group: 'com.liferay.portal', name: 'util-bridges', version: '7.0.0-SNAPSHOT'],
			[group: 'com.liferay.portal', name: 'util-java', version: '7.0.0-SNAPSHOT'],
			[group: 'com.liferay.portal', name: 'util-taglib', version: '7.0.0-SNAPSHOT'],
			[group: 'commons-logging', name: 'commons-logging', version: '1.1.1'],
			[group: 'hsqldb', name: 'hsqldb', version: '1.8.0.7'],
			[group: 'javax.activation', name: 'activation', version: '1.1'],
			[group: 'javax.ccpp', name: 'ccpp', version: '1.0'],
			[group: 'javax.jms', name: 'jms', version: '1.1'],
			[group: 'javax.mail', name: 'mail', version: '1.4'],
			[group: 'javax.portlet', name: 'portlet-api', version: '2.0'],
			[group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'],
			[group: 'javax.servlet.jsp', name: 'jsp-api', version: '2.1'],
			[group: 'log4j', name: 'log4j', version: '1.2.16'],
			[group: 'mysql', name: 'mysql-connector-java', version: '5.1.23'],
			[group: 'net.sf', name: 'jargs', version: '1.0'],
			[group: 'net.sourceforge.jtds', name: 'jtds', version: '1.2.6'],
			[group: 'org.eclipse.persistence', name: 'javax.persistence', version: '2.0.0'],
			[group: 'postgresql', name: 'postgresql', version: '9.2-1002.jdbc4']
		)
	}

	repositories {
		maven {
			url "http://cdn.repository.liferay.com/nexus/content/groups/public"
		}
	}

	sourceSets {
		main {
			java {
				srcDir pluginSrcDir
			}
		}
	}

	war {
		afterEvaluate {
			destinationDir = file("${rootDir}/dist")
			version = pluginFullVersion
		}
	}
}